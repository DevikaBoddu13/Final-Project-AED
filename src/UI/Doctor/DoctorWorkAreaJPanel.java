/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.Doctor;

import BusinessModel.Doctor.Doctor;
import BusinessModel.Ecosystem;
import BusinessModel.Patient.Patient;
import BusinessModel.UserAccount.User;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import UI.DoctorAdministration.DisplayPatientInfoJPanel;
import UI.Lab.LabWorkSpaceJPanel;
import UI.Dispensary.DispensaryWorkSpaceJPanel;

/**
 *
 * @author podda
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    private final JPanel userProcessContainer;
    private final Ecosystem ecoSystem;
    User userAccount;

    public DoctorWorkAreaJPanel(JPanel userProcessContainer, User account, Ecosystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = system;
        this.userAccount = account;
        populatePatientTable();
        populatePatientTable1();
    }

    private void populatePatientTable() {
        try{
        DefaultTableModel model = (DefaultTableModel) PatientTable.getModel();
        model.setRowCount(0);
        for (Doctor doctor : ecoSystem.getDoctorDirectory().getDoctors()) {
            if (doctor.getDoctor_UserName().equals(userAccount.getUsername())) {
                for (Patient patient : doctor.getDoc_AssessedPatientList()) 
                {
                    Object[] row = new Object[8];
                    row[0] = patient.getpatient_FirstName();
                    row[1] = patient.getpatient_LastName();
                    row[2] = patient.getpatient_TypeOfInjury();
                    row[3] = patient.getpatient_BloodType();
                    row[4] = patient.getpatient_Age();
                    row[5] = patient.getpatient_Gender();
                    row[6] = patient.getpatient_Status();
                    row[7] = patient;
                    if(!patient.getpatient_Status().equals("Discharged")){
                    model.addRow(row);}
                }
            }
        }
        }
        catch(Exception e){
            e.printStackTrace();
            System.out.println("error message ---"+e.getMessage());
            System.out.println("no patients yet");
        }
    }
    private void populatePatientTable1() {
        try{
        DefaultTableModel model = (DefaultTableModel) PatientTable1.getModel();

        model.setRowCount(0);

        for (Doctor doctor : ecoSystem.getDoctorDirectory().getDoctors()) {
            if (doctor.getDoctor_UserName().equals(userAccount.getUsername())) {
                for (Patient patient : doctor.getDoc_AssessedPatientList()) 
                {
                    Object[] row = new Object[8];
                    row[0] = patient.getpatient_FirstName();
                    row[1] = patient.getpatient_LastName();
                    row[2] = patient.getpatient_TypeOfInjury();
                    row[3] = patient.getpatient_BloodType();
                    row[4] = patient.getpatient_Age();
                    row[5] = patient.getpatient_Gender();
                    row[6] = patient.getpatient_Status();
                    row[7] = patient;
                    if(patient.getpatient_Status().equals("Discharged")){
                    model.addRow(row);}
                }
            }
        }
        }
        catch(Exception e){
            System.out.println("no patients yet");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblManageCustomers = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PatientTable = new javax.swing.JTable();
        btnVisitPatient = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        PatientTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(40, 157, 144));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblManageCustomers.setBackground(new java.awt.Color(0, 153, 204));
        lblManageCustomers.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        lblManageCustomers.setForeground(new java.awt.Color(255, 255, 255));
        lblManageCustomers.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblManageCustomers.setText("Doctor");
        add(lblManageCustomers, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 20, 330, -1));

        PatientTable.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        PatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Injury", "Blood Type", "Age", "Gender", "Status", "obj"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(PatientTable);
        if (PatientTable.getColumnModel().getColumnCount() > 0) {
            PatientTable.getColumnModel().getColumn(7).setMinWidth(0);
            PatientTable.getColumnModel().getColumn(7).setPreferredWidth(0);
            PatientTable.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 150, 740, 191));

        btnVisitPatient.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        btnVisitPatient.setForeground(new java.awt.Color(202, 97, 71));
        btnVisitPatient.setText("Visit");
        btnVisitPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisitPatientActionPerformed(evt);
            }
        });
        add(btnVisitPatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 360, 120, 30));
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 63, 1404, 10));

        PatientTable1.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        PatientTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Injury", "Blood Type", "Age", "Gender", "Status", "obj"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(PatientTable1);
        if (PatientTable1.getColumnModel().getColumnCount() > 0) {
            PatientTable1.getColumnModel().getColumn(7).setMinWidth(0);
            PatientTable1.getColumnModel().getColumn(7).setPreferredWidth(0);
            PatientTable1.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 400, 740, 191));

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Patients Treated");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 360, 340, 34));

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("New Patients");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 270, -1));
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 13, 60, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void btnVisitPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisitPatientActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = PatientTable.getSelectedRow();
        if (selectedRowIndex < 0) 
        {
            JOptionPane.showMessageDialog(null, "Please select a row from the table to view details", "Warning", JOptionPane.WARNING_MESSAGE);
        } 
        else 
        {
            Patient patient = (Patient) PatientTable.getValueAt(selectedRowIndex, 7);
            if(patient.getpatient_Status().equals("Doctor Visiting")){
            JOptionPane.showMessageDialog(null, "Patient is in visit.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else{
            patient.setpatient_Status("Doctor Visiting");
            DoctorVisitJPanel doctorVisit = new DoctorVisitJPanel(userProcessContainer, userAccount, ecoSystem, patient);
            userProcessContainer.add("Visit Doctor", doctorVisit);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            }
        }
        
        
    }//GEN-LAST:event_btnVisitPatientActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PatientTable;
    private javax.swing.JTable PatientTable1;
    private javax.swing.JButton btnVisitPatient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblManageCustomers;
    // End of variables declaration//GEN-END:variables
}
